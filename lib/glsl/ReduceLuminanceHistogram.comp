#include "postprocess_interface.glsl"

PUSH_CONSTANTS { ReduceLuminanceHistogramConstants g_pcs; };

shared uint histogram[NUM_LUMINANCE_HISTOGRAM_BINS]; 

NUM_THREADS(REDUCE_LUMINANCE_HISTOGRAM_THREADS_X, 1, 1);
void main() {
  uint index = gl_LocalInvocationIndex;

  histogram[index] = g_pcs.histogram_ptr.bins[index];
  barrier();

  if (index != 0) {
    return;
  }

  uint num_samples = 0;
  float log_luminance = 0.0f;
  for (int i = 1; i < NUM_LUMINANCE_HISTOGRAM_BINS; ++i) {
    float bin_luminance = mix(MIN_LOG_LUMINANCE, MAX_LOG_LUMINANCE, (i + 0.5f) / NUM_LUMINANCE_HISTOGRAM_BINS);
    uint bin_count = histogram[i];
    log_luminance += bin_luminance * bin_count;
    num_samples += bin_count;
  }
  log_luminance /= num_samples;
  float luminance = exp2(log_luminance - g_pcs.exposure_compensation);
  float max_luminance = 9.6f * luminance;
  float exposure = 1.0f / max_luminance;

  g_pcs.exposure_ptr.exposure = exposure * g_pcs.previous_exposure_ptr.exposure;
}
