#include "PostProcessing.glsl"
#include "PostProcessingPass.glsl"
#include "Textures.glsl"

TEXTURES;

PUSH_CONSTANTS GLSL_POST_PROCESSING_CONSTANTS g_pcs;

const uint THREADS_X = POST_PROCESSING_THREADS_X;
const uint THREADS_Y = POST_PROCESSING_THREADS_Y;
const uint WORK_SIZE_X = POST_PROCESSING_WORK_SIZE_X;
const uint WORK_SIZE_Y = POST_PROCESSING_WORK_SIZE_Y;

shared uint histogram[NUM_LUMINANCE_HISTOGRAM_BINS];

vec4[WORK_SIZE_X][WORK_SIZE_Y] build_luminance_histogram_pass(
    vec4 colors[WORK_SIZE_X][WORK_SIZE_Y]) {
  const uint index = gl_LocalInvocationIndex;

  histogram[index] = 0;
  barrier();

  float exposure = imageLoad(g_rimages2d[g_pcs.previous_exposure_texture], ivec2(0)).r;

  for (int x = 0; x < WORK_SIZE_X; ++x) {
    for (int y = 0; y < WORK_SIZE_Y; ++y) {
      float luminance = get_luminance(colors[x][y].rgb / exposure);
      luminance = max(luminance, MIN_LUMINANCE);
      float alpha = (log2(luminance) - MIN_LOG_LUMINANCE) /
                    (MAX_LOG_LUMINANCE - MIN_LOG_LUMINANCE);
      int bin = int(alpha * NUM_LUMINANCE_HISTOGRAM_BINS);
      // Ignore bin 0
      if (bin > 0) {
        atomicAdd(histogram[bin], 1);
      }
    }
  }

  barrier();

  // Ignore bin 0 and zero-valued bins
  if (index > 0 && histogram[index] > 0) {
    atomicAdd(g_pcs.histogram.bins[index], histogram[index]);
  }

  return colors;
}

vec4[WORK_SIZE_X][WORK_SIZE_Y] tone_mapping_pass(
    vec4 colors[WORK_SIZE_X][WORK_SIZE_Y]) {
  for (int x = 0; x < WORK_SIZE_X; ++x) {
    for (int y = 0; y < WORK_SIZE_Y; ++y) {
      vec3 color = colors[x][y].rgb;
      float luminance = get_luminance(color);
      color *= luminance / (1.0f + luminance);
      colors[x][y].rgb = color;
    }
  }
  return colors;
}

NUM_THREADS(THREADS_X, THREADS_Y, 1);
void main() {
  const uint tex = g_pcs.tex;
  const ivec2 size = imageSize(g_rwimages2d[tex]);
  const ivec2 start_pos =
      ivec2(gl_GlobalInvocationID.xy) * ivec2(WORK_SIZE_X, WORK_SIZE_Y);
  const ivec2 end_pos = min(start_pos + ivec2(WORK_SIZE_X, WORK_SIZE_Y), size);

  vec4 colors[WORK_SIZE_X][WORK_SIZE_Y];
  for (int x = 0; x < WORK_SIZE_X; ++x) {
    for (int y = 0; y < WORK_SIZE_Y; ++y) {
      colors[x][y] = vec4(vec3(0.0f), 1.0f);
    }
  }

  for (int x = start_pos.x; x < end_pos.x; ++x) {
    for (int y = start_pos.y; y < end_pos.y; ++y) {
      ivec2 pos = ivec2(x, y);
      colors[x - start_pos.x][y - start_pos.y] =
          imageLoad(g_rwimages2d[tex], pos);
    }
  }

  if (!IS_NULL(g_pcs.histogram)) {
    colors = build_luminance_histogram_pass(colors);
  }

  colors = tone_mapping_pass(colors);

  for (int x = start_pos.x; x < end_pos.x; ++x) {
    for (int y = start_pos.y; y < end_pos.y; ++y) {
      ivec2 pos = ivec2(x, y);
      imageStore(g_rwimages2d[tex], pos,
                 colors[x - start_pos.x][y - start_pos.y]);
    }
  }
}
