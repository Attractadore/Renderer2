#include "PostProcessing.glsl"
#include "PostProcessingPass.glsl"
#include "Textures.glsl"

TEXTURES;

PUSH_CONSTANTS GLSL_POST_PROCESSING_CONSTANTS g_pcs;

const uint THREADS_X = POST_PROCESSING_THREADS_X;
const uint THREADS_Y = POST_PROCESSING_THREADS_Y;

shared uint histogram[NUM_LUMINANCE_HISTOGRAM_BINS];

void init_luminance_histogram() {
  uint i = gl_LocalInvocationIndex;
  const uint stride = THREADS_X * THREADS_Y;
  for (;i < NUM_LUMINANCE_HISTOGRAM_BINS; i += stride) {
    histogram[i] = 0;
  }
  barrier();
}

void add_to_luminance_histogram(float luminance) {
  luminance = max(luminance, MIN_LUMINANCE);
  float alpha = (log2(luminance) - MIN_LOG_LUMINANCE) /
                (MAX_LOG_LUMINANCE - MIN_LOG_LUMINANCE);
  int bin = int(alpha * NUM_LUMINANCE_HISTOGRAM_BINS);
  // Ignore bin 0
  if (bin > 0) {
    atomicAdd(histogram[bin], 1);
  }
}

void store_luminance_histogram() {
  barrier();
  uint i = gl_LocalInvocationIndex;
  const uint stride = THREADS_X * THREADS_Y;
  for (; i < NUM_LUMINANCE_HISTOGRAM_BINS; i += stride) {
    // Ignore bin 0 and zero-valued bins
    if (i > 0 && histogram[i] > 0) {
      atomicAdd(g_pcs.histogram.bins[i], histogram[i]);
    }
  }
}

NUM_THREADS(THREADS_X, THREADS_Y, 1);
void main() {
  const uint tex = g_pcs.tex;
  const ivec2 size = imageSize(g_rwimages2d[tex]);
  const ivec2 stride = ivec2(gl_NumWorkGroups.xy) * ivec2(THREADS_X, THREADS_Y);

  float exposure;
  bool enable_automatic_exposure = !IS_NULL(g_pcs.histogram);
  if (enable_automatic_exposure) {
    exposure =
        imageLoad(g_rimages2d[g_pcs.previous_exposure_texture], ivec2(0)).r;
    init_luminance_histogram();
  }

  const ivec2 start = ivec2(gl_GlobalInvocationID.xy);
  for (int x = start.x; x < size.x; x += stride.x) {
    for (int y = start.y; y < size.y; y += stride.y) {
      vec4 color = imageLoad(g_rwimages2d[tex], ivec2(x, y));
      float luminance = get_luminance(color.rgb);

      if (enable_automatic_exposure) {
        add_to_luminance_histogram(luminance / exposure);
      }

      // Tone mapping
      color.rgb /= (1.0f + luminance);

      imageStore(g_rwimages2d[tex], ivec2(x, y), color);
    }
  }

  if (enable_automatic_exposure) {
    store_luminance_histogram();
  }
}
