#include "InstanceCullingAndLODPass.h"
#include "Math.h"

PUSH_CONSTANTS(InstanceCullingAndLODPassArgs);

int cull_and_select_lod(InstanceCullingAndLODPassUniforms ub, Mesh mesh, uint mesh_instance) {
  const bool frustum_culling = bool(ub.feature_mask & INSTANCE_CULLING_AND_LOD_FRUSTUM_BIT);
  const bool lod_selection = bool(ub.feature_mask & INSTANCE_CULLING_AND_LOD_LOD_SELECTION_BIT);

  if (!frustum_culling && !lod_selection) {
    return 0;
  }

  mat4 pvm = ub.proj_view * mat4(DEREF(pc.transform_matrices[mesh_instance]));
  ClipSpaceBoundingBox cs_bb = project_bb_to_cs(pvm, mesh.bb);

  // TODO: support finite far plane.
  float n = cs_bb.p[0].z;

  float zmin, zmax;
  get_cs_bb_min_max_z(cs_bb, zmin, zmax);

  // Cull if bounding box is in front of near plane.
  if (frustum_culling && zmax < n) {
    return -1;
  }

  // Select highest lod and don't cull if bounding box crosses near plane.
  if (zmin < n) {
    return 0;
  }

  NDCBoundingBox ndc_bb = convert_cs_bb_to_ndc(cs_bb);

  if (frustum_culling && cull_ndc_bb(ndc_bb)) {
    return -1;
  }

  if (!lod_selection) {
    return 0;
  }

  float area = get_ndc_bb_area(ndc_bb);
  uint num_triangles = uint(area * ub.lod_triangle_density);

  int l = 0;
  for (; l < mesh.num_lods - 1; ++l) {
    if (mesh.lods[l].num_triangles <= num_triangles) {
      break;
    }
  }

  return l;
}

NUM_THREADS(INSTANCE_CULLING_AND_LOD_THREADS);
void main() {
  const uint STRIDE = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
  InstanceCullingAndLODPassUniforms ub = DEREF(pc.ub);

  for (uint t = gl_GlobalInvocationID.x; t < ub.num_instances; t += STRIDE) {
    InstanceCullData cull_data = DEREF(pc.cull_data[t]);

    Mesh mesh = DEREF(pc.meshes[cull_data.mesh]);

    int l = cull_and_select_lod(ub, mesh, cull_data.mesh_instance);
    if (l < 0) {
      continue;
    }
    l = clamp(l - ub.lod_bias, 0, int(mesh.num_lods - 1));
    MeshLOD lod = mesh.lods[l];

    uint base_meshlet = lod.base_meshlet;
    uint num_meshlets = lod.num_meshlets;
    while (num_meshlets != 0) {
      uint bucket = findLSB(num_meshlets);
      uint bucket_stride = 1 << bucket;

      MeshletCullData meshlet_cull_data;
      meshlet_cull_data.mesh = cull_data.mesh;
      meshlet_cull_data.mesh_instance = cull_data.mesh_instance;
      meshlet_cull_data.base_meshlet = base_meshlet;

      base_meshlet += bucket_stride;
      num_meshlets &= ~bucket_stride;

      uint bucket_offset = ub.meshlet_bucket_offsets[bucket];
      uint offset = atomicAdd(DEREF(pc.meshlet_bucket_sizes[bucket]), 1);
      uint bucket_size = offset + 1;
      DEREF(pc.meshlet_cull_data[bucket_offset + offset]) = meshlet_cull_data;

      uint old_num_bucket_threads = (bucket_size - 1) * bucket_stride;
      uint old_num_bucket_work_groups = ceil_div(old_num_bucket_threads, MESHLET_CULLING_THREADS);
      uint num_bucket_threads = bucket_size * bucket_stride;
      uint num_bucket_work_groups = ceil_div(num_bucket_threads, MESHLET_CULLING_THREADS);
      if (old_num_bucket_work_groups != num_bucket_work_groups) {
        atomicMax(DEREF(pc.meshlet_bucket_commands[bucket]).x, num_bucket_work_groups);
      }
    }
  }
}
